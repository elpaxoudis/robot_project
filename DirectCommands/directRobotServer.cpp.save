#include "Aria.h"
#include "ServerSocket.h"
#include "SocketException.h"
#include <string>
#include <iostream>
#include "Follow.h"
using namespace std;

#define WIDTH 640
#define HEIGHT 480
#define STOP_DISTANCE 500

int main ( int argc, char **argv ){
//cout << "running....\n";
try{
	// Create the socket
	ServerSocket server ( 30000 );
	Aria::init();
	ArRobot robot;
	ArArgumentParser parser(&argc, argv);
	parser.loadDefaultArguments();
	ArSonarDevice sonar;
	Follow follow = Follow(&robot,&sonar);

	//Add the sonar to the robot
	robot.addRangeDevice(&sonar);

	// Connect to the robot, get some initial data from it such as type and name,
	// and then load parameter files for this robot.
	ArRobotConnector robotConnector(&parser, &robot);
	if(!robotConnector.connectRobot()){
		ArLog::log(ArLog::Terse, "Robot Server: Could not connect to the robot.");
		if(parser.checkHelpAndWarnUnparsed()){
			// -help not given
			Aria::logOptions();
			Aria::exit(1);
		}
	}
	if (!Aria::parseArgs()){
		Aria::logOptions();
		Aria::shutdown();
		return 1;
	}

	ArLog::log(ArLog::Normal, "Robot Server: Connected.");

	robot.enableMotors();

	// Start the robot processing cycle running in the background.
	// True parameter means that if the connection is lost, then the
	// run loop ends.
	robot.runAsync(true);
	
	//Main loop
	while (true){

		//The socket to accept connection
		ServerSocket new_sock;
		server.accept ( new_sock );

		try{
			while ( true ){
				int data[2];		//matrix with X,Y of BB
				int lastPositionXY[2];	//matrix with last X,Y of BB
				int target;		//1 if we have target 0 if no target

				//receive data from tld
				new_sock >> data;
				cout << data[0] << "," << data[1] << endl;

				
//keep last X of target
				if( data[0] != -1)
					lastPositionXY[0] = data[0];


				target = follow.run(data);
			}
		}
		catch ( SocketException& ) {
			cout << "Lost Connection" << endl;
			robot.lock();
			robot.stop();
			robot.unlock();
		}

	}
}
catch ( SocketException& e ){
	std::cout << "Exception was caught:" << e.description() << "\nExiting.\n";
}

ArLog::log(ArLog::Normal, "simpleMotionCommands: Exiting.");
return 0;
}
